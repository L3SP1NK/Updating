#!/bin/bash
# Update the system.

# Check if root
if [ "$EUID" -ne 0 ]
    then
        echo -e "${RED}This script must be runned as root${RESET_COLOR}"
        exit
fi

# Set color
RESET_COLOR="\e[0m"
BOLD="\e[1m"
BLUE="\e[34m"
RED="\e[31m"
GREEN="\e[32m"
YELLOW="\e[33m"
GREY="\e[37m"

CWD=$(pwd)

which neofetch>/dev/null
if [[ ${?} -eq 0 ]]
	then
		neofetch
	else
		cat /etc/os-release
fi

function UPDATE_APT()
{
	echo -e "\n${YELLOW}Removing downloaded archive files and unused packages...${RESET_COLOR}"
	apt-get clean -y
	apt-get autoclean -y
	apt-get --autoremove --purge -y

	echo -e "\n${YELLOW}Configuring/fixing possibly broken packages...${RESET_COLOR}"
	dpkg --configure -a
	apt-get --fix-broken install

	echo -e "\n${YELLOW}Retrieving new lists of packages...${RESET_COLOR}"
	apt-get update

	echo -e "\n${YELLOW}Installing packages upgrades...${RESET_COLOR}"
	apt-get upgrade -y --with-new-pkgs
	apt-get dist-upgrade -y
	apt-get full-upgrade -y

	echo -e "\n${YELLOW}Configuring possibly broken packages...${RESET_COLOR}"
	dpkg --configure -a
	apt-get --fix-broken install

	echo -e "\n${YELLOW}Removing downloaded archive files and unused packages...${RESET_COLOR}"
	apt-get clean -y

	apt-get autoclean -y
	apt-get autoremove --purge -y

}

function UPDATE_NPM()
{
	echo -e "\n${YELLOW}Checking NPM installation...${RESET_COLOR}"
	npm doctor
	echo -e "\n${YELLOW}Auditing packages...${RESET_COLOR}"
	npm audit
	echo -e "\n${YELLOW}Updating NPM packages...${RESET_COLOR}"
	npm update
	cat /root/.npm/_logs/*
}

function UPDATE_FLATPAK()
{
	echo -e "\n${YELLOW}Flatpack installed:${RESET_COLOR}"
	flatpak list
	echo -e "\n${YELLOW}Updating flatpack...${RESET_COLOR}"
	flatpak update
}

GIT_REPO_LOCATION="/"
function UPDATE_GIT()
{
	cd ${GIT_REPO_LOCATION}
	# Search for GIT repos and pull them.
	for GIT_PATH in $(find ${GIT_REPO_LOCATION} -type d -name ".git" 2>/dev/null)
		do
			cd ${GIT_PATH};
			echo -e "\n${BLUE}${BOLD}${GIT_PATH}${RESET_COLOR}"
			cd ..
			git config pull.rebase false
			git stash
			git pull
			cd ${GIT_REPO_LOCATION}
		done
}

function UPDATE_KERNEL()
{
	FIRMWARE_PATH="/opt/FIRMWARE"
	echo -e "\n${YELLOW}Installing the linux firmware packages...${RESET_COLOR}"
	apt-get install -y firmware-linux firmware-linux-free firmware-linux-nonfree 2>/dev/null

	# Check if xorg.conf is configured
	if [ -n "$(ls -A ${FIRMWARE_PATH} 2>/dev/null)" ]
		then
			cat /etc/X11/xorg.conf 2>/dev/null | grep -e "amdgpu" > /dev/null
				if [[ ${?} -eq 0 ]]
					then
						echo -e "\n${YELLOW}Your X server is configured to use the amdgpu driver.${RESET_COLOR}"
						echo -e "\n${YELLOW}Do you want to clone the firmware repository to ${FIRMWARE_PATH} ? (Y/n)${RESET_COLOR}"
						read -s CLONE_REPO
							if [[ ${CLONE_REPO} == n ]]
								then
									exit 0
								else
									echo -e "\n${YELLOW}Cloning the linux firmware (+ the unofficial AMD) repositories...${RESET_COLOR}"
									mkdir -p ${FIRMWARE_PATH}
									cd ${FIRMWARE_PATH}
									git clone https://github.com/Umio-Yasuno/unofficial-amdgpu-firmware-repo.git 2>/dev/null
										if [[ ${?} -eq 128 ]]
											then
												echo -e "\n${GREEN}These repository is already there ! ${RESET_COLOR}"
												echo -e "\n${YELLOW}Copying firmwares files...${RESET_COLOR}"
												cp -vur ${FIRMWARE_PATH}/unofficial-amdgpu-firmware-repo/amdgpu/* /lib/firmware/amdgpu
												cp -vur ${FIRMWARE_PATH}/linux-firmware/* /lib/firmware
												update-initramfs -du
											else
												cp -vur ${FIRMWARE_PATH}/linux-firmware/* /lib/firmware
												cp -vur ${FIRMWARE_PATH}/unofficial-amdgpu-firmware-repo/amdgpu/* /lib/firmware/amdgpu
												update-initramfs -du
										fi
							fi
								else
									echo -e "\n${RED}AMD driver is not loaded.${RESET_COLOR}"
							fi
							echo -e "\n${YELLOW}Cloning the linux firmware repository...${RESET_COLOR}"
							mkdir -p ${FIRMWARE_PATH}
							cd ${FIRMWARE_PATH}
							git clone https://git.kernel.org/pub/scm/linux/kernel/git/firmware/linux-firmware.git 2>/dev/null
							if [[ ${?} -eq 128 ]]
								then
									echo -e "\n${YELLOW}The repository is already there ! ${RESET_COLOR}"
									echo -e "\n${YELLOW}Copying file...${RESET_COLOR}"
									cp -vur ${FIRMWARE_PATH}/linux-firmware/* /lib/firmware
									update-initramfs -du
								else
									cp -vur ${FIRMWARE_PATH}/linux-firmware/* /lib/firmware
									update-initramfs -du
							fi
					else
						echo -e "\n${YELLOW}Xorg is not configured yet ! ${RESET_COLOR}"
						echo -e "\n${YELLOW}Stop the X sessions and run 'X -configure'.${RESET_COLOR}"
			fi
}

clear

which apt-get > /dev/null
if [[ ${?} -eq 0 ]]
	then
		echo -e "\n${GREY}$(date +%H:%M:%S)${RESET_COLOR}"
		echo -e "\n${YELLOW}${BOLD}$(apt list --installed | wc -l)${RESET_COLOR}${YELLOW} Packages currently installed.${RESET_COLOR}"
		echo -e "\n${YELLOW}Updating${BOLD} APT${RESET_COLOR}${YELLOW} packages...${RESET_COLOR}"
		UPDATE_APT 2>/dev/null
		echo -e "\n${GREEN}Done ! ${RESET_COLOR}"
	else
		echo -e "\n${RED}The${BOLD}APT${RESET_COLOR}${RED} package manager is not installed on this system.${RESET_COLOR}"
fi

which flatpak > /dev/null
if [[ ${?} -eq 0 ]]
	then
		echo -e "\n${GREY}$(date +%H:%M:%S)${RESET_COLOR}"
		echo -e "\n${YELLOW}${BOLD}Flatpak${RESET_COLOR}${YELLOW} is located at $(which flatpak).${RESET_COLOR}"
		echo -e "\n${YELLOW}You are using${BOLD} $(flatpak --version).${RESET_COLOR}"
		UPDATE_FLATPAK
		echo -e "\n${GREEN}Done ! ${RESET_COLOR}"
	else
		echo -e "\n${RED}${BOLD}Flatpak${RESET_COLOR}${RED} is not installed on this system.${RESET_COLOR}"
fi

which npm>/dev/null
if [[ ${?} -eq 0 ]]
	then
		echo -e "\n${GREY}$(date +%H:%M:%S)${RESET_COLOR}"
		echo -e "\n${YELLOW}${BOLD}NPM${RESET_COLOR}${YELLOW} is located at $(which npm).${RESET_COLOR}"
		echo -e "\n${YELLOW}Updating${BOLD}NPM${RESET_COLOR}${YELLOW} packages...${RESET_COLOR}"
		UPDATE_NPM
		echo -e "\n${GREEN}Done ! ${RESET_COLOR}"
	else
		echo -e "\n${RED}${BOLD}NPM${RESET_COLOR}${RED} is not installed on this system.${RESET_COLOR}"
fi

which git>/dev/null
if [[ ${?} -eq 0 ]]
	then
		echo -e "\n${GREY}$(date +%H:%M:%S)${RESET_COLOR}"
		echo -e "\n${YELLOW}${BOLD}Git${RESET_COLOR}${YELLOW} is located at $(which git).${RESET_COLOR}"
		echo -e "\n${YELLOW}Updating${BOLD} Git${RESET_COLOR}${YELLOW} repositories...${RESET_COLOR}"
		UPDATE_GIT
		echo -e "\n${GREEN}Done ! ${RESET_COLOR}"
	else
		echo -e "\n${RED}${BOLD}Git${RESET_COLOR}${RED} is not installed on this system.${RESET_COLOR}"
fi

echo -e "\n${GREY}$(date +%H:%M:%S)${RESET_COLOR}"
echo -e "\n${YELLOW}Updating${BOLD} kernel${RESET_COLOR}${YELLOW} ...${RESET_COLOR}"
UPDATE_KERNEL
echo -e "\n${GREEN}Done ! ${RESET_COLOR}"

echo -e "\n${GREEN}Update finished ! ${RESET_COLOR}"
