#!/bin/bash
## This script is only made for Debian based distros, it will update:
## - apt packages
## - git repositories
## - flatpak applications
## - npm packages
## - the linux firmware and kernel

RC="\e[0m"
BOLD="\e[1m"
GREEN="\e[32m"
RED="\e[31m"
BLUE="\e[34m"

WARN="${RED}${BOLD} [-] ${RC}"
INFO="${BLUE}${BOLD} [*] ${RC}"
GOOD="${GREEN}${BOLD} [+] ${RC}"

UPDATE_APT()
{
	echo -e "${INFO}Configuring/fixing possibly broken packages${RC}:"
	apt-get -f -y install
	dpkg --configure -a

	echo -e "${INFO}Removing downloaded archive files and unused packages${RC}:"
	apt-get -y clean
	apt-get -y autoclean
	apt-get -y autoremove --purge
	apt-get -y purge --autoremove

	echo -e "${INFO}Retrieving new lists of packages${RC}:"
	apt-get update

	echo -e "${INFO}Installing packages upgrades${RC}:"
	apt-get -f -y upgrade
	apt-get -f -y dist-upgrade
	apt-get -f -y full-upgrade

	echo -e "${INFO}Configuring/fixing possibly broken packages${RC}:"
	apt-get -f -y install
	dpkg --configure -a

	echo -e "${INFO}Removing downloaded archive files and unused packages:${RC}"
	apt-get -y clean
	apt-get -y autoclean
	apt-get -y autoremove --purge
}

UPDATE_NPM()
{
	echo -e "${INFO}Updating NPM packages:${RC}"
	npm update
	echo -e "${INFO}Checking NPM installation:${RC}"
	npm doctor
	echo -e "${INFO}Auditing NPM packages:${RC}"
	npm audit
	echo -e "${INFO}Fixing NPM packages:${RC}"
	npm audit fix
}

UPDATE_FLATPAK()
{
	echo -e "${INFO}Flatpak applications installed:${RC}"
	flatpak list
	echo -e "${INFO}Checking flatpak applications:${RC}"
	flatpak repair
	echo -e "${INFO}Updating flatpak:${RC}"
	flatpak update -y
}

UPDATE_GIT()
{
	GIT_REPO_LOCATION="/"
	cd ${GIT_REPO_LOCATION} || exit 1
	## Search for GIT repos and update them.
	## (Need to find a better way to exclude /mnt)
	for GIT_PATH in $(find ${GIT_REPO_LOCATION} -type d -name ".git" 2>/dev/null | grep -v /mnt/)
		do
			cd "${GIT_PATH}" || exit 1
			echo -e "${INFO}Updating ${GIT_PATH}:"
			cd .. || exit 1
			git config pull.rebase true
			git stash
			git pull
			cd ${GIT_REPO_LOCATION} || exit 1
		done
}

UPDATE_KERNEL()
{
	FIRMWARE_PKGS="firmware-linux firmware-linux-free firmware-linux-nonfree firmware-amd-graphics firmware-ast firmware-ath9k-htc firmware-atheros firmware-cavium firmware-intel-sound firmware-intelwimax firmware-ipw2x00 firmware-ivtv firmware-iwlwifi firmware-linux firmware-linux-free firmware-linux-nonfree firmware-misc-nonfree firmware-mod-kit firmware-mod-kit-dbgsym firmware-qcom-media firmware-qcom-soc firmware-realtek firmware-samsung firmware-ti-connectivity"
	apt-get -f -y install ${FIRMWARE_PKGS}

	FIRMWARE_PATH="/opt/FIRMWARE/"
	mkdir -p ${FIRMWARE_PATH}
	cd ${FIRMWARE_PATH} || exit 1
	git clone "https://git.kernel.org/pub/scm/linux/kernel/git/firmware/linux-firmware.git" --depth=8 || exit 1
	cp -vur ${FIRMWARE_PATH}/linux-firmware/* /lib/firmware/ || exit 1
}

MAIN()
{
	echo -e "\n$(date '+ %T - %A %d %B %Y')\n"

	## Update apt packages.
	if ! which apt-get>/dev/null
		then
			echo -e "${WARN}The APT package manager is not installed on this system.${RC}"
			exit 1
		else
			SECONDS="0"
			PKG_NUM=$(dpkg-query -W | wc -l)
			echo -e "${GOOD}${PKG_NUM} Packages currently installed.${RC}"
			echo -e "${INFO}Updating APT packages:${RC}"
			UPDATE_APT
			if [[ ${?} -eq "0" ]]
				then
					echo -e "${GOOD}APT packages updated in ${SECONDS} seconds.${RC}"
				else
					echo -e "${RED}Something went wrong!.${RC}"
					exit 1
			fi
	fi

	## Update flatpak applications.
	if ! which flatpak>/dev/null
		then
			echo -e "${WARN}Flatpak is not installed on this system.${RC}"
		else
			SECONDS="0"
			echo -e "${GOOD}You are using $(flatpak --version).${RC}"
			UPDATE_FLATPAK
			if [[ ${?} -eq "0" ]]
				then
					echo -e "${GOOD}Flatpak updated in ${SECONDS} seconds.${RC}"
				else
					echo -e "${RED}Something went wrong!.${RC}"
					exit 1
			fi
	fi

	## Update NPM applications.
	if ! which npm>/dev/null
		then
			echo -e "${WARN}NPM is not installed on this system.${RC}"
		else
			SECONDS="0"
			echo -e "${INFO}UpdatingNPM packages:${RC}"
			UPDATE_NPM
			if [[ ${?} -eq "0" ]]
				then
					echo -e "${GOOD}NPM updated in ${SECONDS} seconds.${RC}"
				else
					echo -e "${RED}Something went wrong!.${RC}"
					exit 1
			fi
	fi

	## Pull git repos.
	if ! which git>/dev/null
		then
			echo -e "${WARN}Git is not installed on this system.${RC}"
		else
			SECONDS="0"
			echo -e "${INFO}Updating Git repositories:${RC}"
			UPDATE_GIT
			if [[ ${?} -eq "0" ]]
				then
					echo -e "${GOOD}Git repositories updated in ${SECONDS} seconds.${RC}"
				else
					echo -e "${RED}Something went wrong!.${RC}"
					exit 1
			fi
	fi

	## Update the linux kernel.
	SECONDS="0"
	echo -e "${INFO}Updating the linux kernel:${RC}"
	UPDATE_KERNEL
	if [[ ${?} -eq "0" ]]
		then
			echo -e "${GOOD}Linux kernel updated in ${SECONDS} seconds.${RC}"
		else
			echo -e "${RED}Something went wrong!.${RC}"
			exit 1
	fi
}

## Check privileges and proceed.
if [[ ${EUID} -ne 0 ]]
	then
		echo -e "${WARN}This script must be run as root!${RC}"
		exit 1
	else
		reset
		MAIN && echo -e "${GOOD}Update finished.${RC}" || echo -e "${WARN}Something went wrong during update!${RC}"
fi
