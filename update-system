#!/bin/bash
## This script is only made for Debian based distros, it will update:
## - APT packages
## - Git repositories
## - Flatpak applications
## - NPM packages
## - Linux firmware and kernel.

RC="\e[0m"
BOLD="\e[1m"
GREY="\e[37m"
YELLOW="\e[33m"
GREEN="\e[32m"
RED="\e[31m"
CYAN="\e[36m"
BLUE="\e[34m"
MAGENTA="\e[35m"

## Set the main color based on the distribution.
DISTRO=$(cat /etc/os-release | grep PRETTY | cut -d "=" -f 2 | sed 's/"//g' | awk '{print $1}')
case ${DISTRO} in
	Kali)
		HOSTNAME_COLOR=${CYAN}
		;;
	Debian)
		HOSTNAME_COLOR=${MAGENTA}
		;;
	*)
		HOSTNAME_COLOR=${GREY}
		;;
esac

UPDATE_APT()
{
	echo -e "\n${YELLOW}Removing downloaded archive files and unused packages...${RC}"
	apt-get -f -y clean
	apt-get -f -y autoclean
	apt-get -f -y autoremove --purge

	echo -e "\n${YELLOW}Configuring/fixing possibly broken packages...${RC}"
	apt-get -f -y install
	dpkg --configure -a

	echo -e "\n${YELLOW}Retrieving new lists of packages...${RC}"
	apt-get update

	echo -e "\n${YELLOW}Installing packages upgrades...${RC}"
	apt-get -f -y upgrade
	apt-get -f -y dist-upgrade
	apt-get -f -y full-upgrade

	echo -e "\n${YELLOW}Configuring possibly broken packages...${RC}"
	apt-get -f -y install
	dpkg --configure -a

	echo -e "\n${YELLOW}Removing downloaded archive files and unused packages...${RC}"
	apt-get -f -y install
	apt-get -f -y clean
	apt-get -f -y autoclean
	apt-get -f -y autoremove --purge

}

UPDATE_NPM()
{
	echo -e "\n${YELLOW}Checking NPM installation...${RC}"
	npm doctor
	echo -e "\n${YELLOW}Auditing packages...${RC}"
	npm audit
	echo -e "\n${YELLOW}Updating NPM packages...${RC}"
	npm update
	cat /root/.npm/_logs/*
}

UPDATE_FLATPAK()
{
	echo -e "\n${YELLOW}Flatpak applications installed:${RC}"
	flatpak list
	echo -e "\n${YELLOW}Updating flatpak...${RC}"
	flatpak update -y
}

UPDATE_GIT()
{
	GIT_REPO_LOCATION="/"
	cd ${GIT_REPO_LOCATION}
	## Search for GIT repos and update them.
	## (i need to find a better way to exclude /mnt)
	for GIT_PATH in $(find ${GIT_REPO_LOCATION} -type d -name ".git" 2>/dev/null|grep -v /mnt/)
		do
			cd ${GIT_PATH};
			echo -e "\n${BLUE}${BOLD}${GIT_PATH}${RC}"
			cd ..
			git config pull.rebase true
			git stash
			git pull
			cd ${GIT_REPO_LOCATION}
		done
}

UPDATE_KERNEL()
{
	## Update the firmware with the official packages, the linux firmware and unoficial AMD firmware repositories.
	## Then update the kernel.
	FIRMWARE_PATH="/opt/FIRMWARE"
	echo -e "\n${YELLOW}Installing the linux firmware packages...${RC}"
	apt-get -f -y install firmware-linux firmware-linux-free firmware-linux-nonfree firmware-misc-nonfree firmware-misc-nonfree 2>/dev/null
	mkdir -p ${FIRMWARE_PATH}
	## Proceed only if the X server is configured.
		if  [[ -f /etc/X11/xorg.conf ]]
			then
				## Install the needed firmware according to the graphic card used in the Xorg configuration file.
				grep -e "amdgpu" /etc/X11/xorg.conf > /dev/null
					if [[ ${?} -eq "0" ]]
						then
							echo -e "\n${YELLOW}Your X server is configured to use the amdgpu driver.${RC}"
							echo -e "\n${YELLOW}Cloning the linux firmware (+ the unofficial AMD) repositories...${RC}"
							cd ${FIRMWARE_PATH}
							apt install firmware-amd-graphics
							git clone https://git.kernel.org/pub/scm/linux/kernel/git/firmware/linux-firmware.git 2>/dev/null
							git clone https://github.com/Umio-Yasuno/unofficial-amdgpu-firmware-repo.git 2>/dev/null
							cp -vur ${FIRMWARE_PATH}/unofficial-amdgpu-firmware-repo/amdgpu/* /lib/firmware/amdgpu
							cp -vur ${FIRMWARE_PATH}/linux-firmware/* /lib/firmware
							update-initramfs -u
						else
							grep -e "intel" /etc/X11/xorg.conf > /dev/null
								if [[ ${?} -eq "0" ]]
									then
										echo -e "\n${YELLOW}Your X server is configured to use the intel driver.${RC}"
										echo -e "\n${YELLOW}Cloning the linux firmware repositories...${RC}"
										cd ${FIRMWARE_PATH}
										git clone https://git.kernel.org/pub/scm/linux/kernel/git/firmware/linux-firmware.git 2>/dev/null
										cp -vur ${FIRMWARE_PATH}/linux-firmware/* /lib/firmware
										update-initramfs -u
								fi
					fi
			else
				echo -e "\n${YELLOW}Your X server is not configured yet, stop the current sessions and run 'X -configure' to generate a configuration file.${RC}"
		fi
}

SYSINFO()
{
	which neofetch > /dev/null
		if [[ ${?} -eq "0" ]]
			then
				neofetch
			else
				## Print basic system information if neofetch is not available.
				echo -e "${HOSTNAME_COLOR}$(cat /etc/os-release | grep --color=never -iE '^name=')${RC}"
				free -h
		fi
}

RUN()
{
	echo -e "\n${GREY}${BOLD}$(date '+ %T - %A %d %B %Y')${RC}\n"

	SYSINFO

	which apt-get > /dev/null
		if [[ ${?} -eq "0" ]]
			then
				SECONDS="0"
				echo -e "\n${YELLOW}${BOLD}$(dpkg-query -f '.\n' -W | wc -l)${RC}${YELLOW} Packages currently installed.${RC}"
				echo -e "\n${YELLOW}Updating${BOLD} APT${RC}${YELLOW} packages...${RC}"
				UPDATE_APT 2>/dev/null
				echo -e "\n${GREEN}${BOLD}APT ${RC}${GREEN}packages updated in ${SECONDS} seconds.${RC}"
				echo -e "\n${GREEN}Done! ${RC}"
			else
				echo -e "\n${RED}The${BOLD}APT${RC}${RED} package manager is not installed on this system.${RC}"
		fi

		which flatpak > /dev/null
		if [[ ${?} -eq "0" ]]
			then
				SECONDS="0"
				echo -e "\n${YELLOW}You are using${BOLD} $(flatpak --version).${RC}"
				UPDATE_FLATPAK 2>/dev/null
				echo -e "\n${GREEN}${BOLD}Flatpak${RC}${GREEN} updated in ${SECONDS} seconds.${RC}"
				echo -e "\n${GREEN}Done! ${RC}"
			else
				echo -e "\n${RED}${BOLD}Flatpak${RC}${RED} is not installed on this system.${RC}"
			fi

		which npm>/dev/null
		if [[ ${?} -eq "0" ]]
			then
				SECONDS="0"
				echo -e "\n${YELLOW}Updating${BOLD}NPM${RC}${YELLOW} packages...${RC}"
				UPDATE_NPM 2>/dev/null
				echo -e "\n${GREEN}${BOLD}NPM${RC}${GREEN} updated in ${SECONDS} seconds.${RC}"
				echo -e "\n${GREEN}Done! ${RC}"
			else
				echo -e "\n${RED}${BOLD}NPM${RC}${RED} is not installed on this system.${RC}"
		fi

		which git>/dev/null
		if [[ ${?} -eq "0" ]]
			then
				SECONDS="0"
				echo -e "\n${YELLOW}Updating${BOLD} Git${RC}${YELLOW} repositories...${RC}"
				UPDATE_GIT 2>/dev/null
				echo -e "\n${GREEN}Git repositories updated in ${SECONDS} seconds.${RC}"
				echo -e "\n${GREEN}Done! ${RC}"
			else
				echo -e "\n${RED}${BOLD}Git${RC}${RED} is not installed on this system.${RC}"
		fi

		SECONDS="0"
		echo -e "\n${YELLOW}Updating the${BOLD} Linux kernel${RC}${YELLOW} ...${RC}"
		UPDATE_KERNEL
		echo -e "\n${GREEN}The${BOLD} Linux kernel${RC}${GREEN} has been updated in ${SECONDS} seconds.${RC}"
		echo -e "\n${GREEN}Done! ${RC}"
}

## Check privileges and proceed.
if [[ "${EUID}" -ne 0 ]]
	then
		echo -e "${RED}This script must be run as root!\nExiting...${RC}"
	    exit 1
	else
		reset
		RUN && echo -e "${BOLD}${GREEN}Update finished!${RC}" || echo -e "${BOLD}${RED}Something went wrong during update...${RC}"
fi
