#!/bin/bash

##	Update: apt packages, git repositories, flatpak applications, npm packages, linux firmwares+kernel

loadColorIcon(){

	RC='\e[0m'
	LIGHT='\e[2m'
	GREEN='\e[32m'
	RED='\e[31m'
	ORANGE='\e[33m'
	BLUE='\e[34m\e[3m\e[1m'

}

[[ ${TERM} == *256* ]] && loadColorIcon


loadNerdIcon(){

	OK=' '
	INFO=' '
	WARN=' '
	FOLDER=' '

}


FONT_PATH='/usr/share/fonts/'

if [[ -d "${FONTS_PATH}" ]]; then

	if find ${FONTS_PATH} -iname "*nerd*">/dev/null; then

		NERDFONT_FOUND='true'

	fi

fi

[[ ${NERDFONT_FOUND} == 'true' ]] && loadNerdIcon


updateApt(){

	UPDATER=$(command -v nala || command -v apt-get) || { echo -e "${WARN}${RED}No updater found!${RC}"; exit 1; }
	ACTIONS=( 'install' 'update' 'upgrade' 'dist-upgrade' 'full-upgrade' )

	dpkg --configure -a

	for ACTION in "${ACTIONS[@]}"; do

		if [[ ${ACTION} == 'update' ]]; then

			${UPDATER} ${ACTION}

		else

			${UPDATER} ${ACTION} -y

		fi

	done

	ACTIONS=( 'clean' 'autoclean' 'autoremove' )

	if [[ ${UPDATER} == 'nala' ]]; then

		${UPDATER} ${ACTIONS}

	elif [[ ${UPDATER} == 'apt-get' ]]; then

		for ACTION in "${ACTIONS[@]}"; do

			${UPDATER} ${ACTION} -y

		done

	fi

}

updateNpm(){

	ACTIONS=( 'update' 'doctor' 'audit' 'audit fix' )

	for ACTION in "${ACTIONS[@]}"; do

		npm ${ACTION}

	done

}

updateFlatpak(){

	echo -e "\n${RC}${ORANGE}${INFO}Checking flatpak applications...\n${RC}"
	flatpak repair -v

	echo -e "\n${RC}${ORANGE}${INFO}Updating flatpak...\n${RC}"
	flatpak update -vy

}

updateGit(){

	GIT_REPO_PATH=( '/opt' '/usr/share/themes' '/usr/share/icons' )
	GIT_REPO_DIR=( $(find "${GIT_REPO_PATH[@]}" -type d -name ".git" 2>/dev/null) )

	for GIT_PATH in "${GIT_REPO_DIR[@]}"
		do

			cd ${GIT_PATH}
			echo -e "\n${RC}${ORANGE}${FOLDER}Updating ${GIT_PATH}...\n${RC}"
			cd ..

			git config pull.rebase true
			git stash
			git pull

		done

}

updateKernel(){

	FIRMWARE_PKGS=( 'firmware-linux' 'firmware-linux-free' 'firmware-linux-nonfree' )

	for PKG in "${FIRMWARE_PKGS[@]}"; do

			${UPDATER} install ${PKG} -y

	done

	FIRMWARE_PATH='/opt/FIRMWARE/'; mkdir -p ${FIRMWARE_PATH}; cd ${FIRMWARE_PATH}
	git clone 'https://git.kernel.org/pub/scm/linux/kernel/git/firmware/linux-firmware.git' 2>/dev/null
	cp -vur ${FIRMWARE_PATH}/linux-firmware/* /lib/firmware/ 2>/dev/null

	update-initramfs -u

}

checkPriv(){

	if [[ ${EUID} -ne '0' ]]; then

			echo -e "${RED}${WARN}Run me as root!\n${RC}"
			exit 1

	fi
}

okMsg(){

	echo -e "\n${RC}${GREEN}${OK}Done in ${SECONDS} seconds!\n${RC}"

}

failMsg(){

	echo -e "${RED}${WARN}Ooops!\nSomething went wrong!\n${RC}"
	exit 1

}

main(){

	clear

	CMDS=( 'apt' 'flatpak' 'npm' 'git' )

	for CMD in "${CMDS[@]}"; do

		if command -v ${CMD}>/dev/null; then

			SECONDS='0'
			CMD=${CMD^}

			echo -e "\n${RC}${BLUE}󰏖 Updating ${CMD}\n${RC}"
			update${CMD} && okMsg || { failMsg; dpkg --audit; }

		fi

	done

	SECONDS='0'

	echo -e "\n${RC}${BLUE}${INFO}󰌽 Updating the linux kernel:\n${RC}"
	updateKernel && okMsg || failMsg

}

checkPriv&&main
