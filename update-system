#!/bin/bash
## This script is only made for Debian based distros, it will update:
## - APT packages
## - Git repositories
## - Flatpak applications
## - NPM packages
## - The Linux firmware
## Comming soon (or not):
## - Snap

## Set colors.
RESET_COLOR="\e[0m"
BOLD="\e[1m"
GREY="\e[37m"
YELLOW="\e[33m"
GREEN="\e[32m"
RED="\e[31m"
CYAN="\e[36m"
BLUE="\e[34m"
MAGENTA="\e[35m"

DISTRO=$(cat /etc/os-release | grep PRETTY | cut -d "=" -f 2 | sed 's/"//g' | awk '{print $1}')
case ${DISTRO} in
	Kali)
		HOSTNAME_COLOR=cyan
		HOSTNAME_COLOR_B=${CYAN}
		;;
	Debian)
		HOSTNAME_COLOR=magenta
		HOSTNAME_COLOR_B=${MAGENTA}
		;;
	*)
		HOSTNAME_COLOR=grey
		HOSTNAME_COLOR_B=${GREY}
		;;
esac

function UPDATE_APT()
{
	echo -e "\n${YELLOW}Clearing out the local repository of retrieved package files...${RESET_COLOR}"
	apt-get -f -y clean
	apt-get -f -y autoclean
	apt-get -f -y autoremove --purge

	echo -e "\n${YELLOW}Configuring/fixing possibly broken packages...${RESET_COLOR}"
	apt-get -f -y install
	dpkg --configure -a

	echo -e "\n${YELLOW}Retrieving new lists of packages...${RESET_COLOR}"
	apt-get update

	echo -e "\n${YELLOW}Installing packages upgrades...${RESET_COLOR}"
	apt-get -f -y upgrade
	apt-get -f -y dist-upgrade
	apt-get -f -y full-upgrade

	echo -e "\n${YELLOW}Configuring possibly broken packages...${RESET_COLOR}"
	apt-get -f -y install
	dpkg --configure -a

	echo -e "\n${YELLOW}Removing downloaded archive files and unused packages...${RESET_COLOR}"
	apt-get -f -y clean
	apt-get -f -y autoclean
	apt-get -f -y autoremove --purge

}

function UPDATE_NPM()
{
	echo -e "\n${YELLOW}Checking NPM installation...${RESET_COLOR}"
	npm doctor
	echo -e "\n${YELLOW}Auditing packages...${RESET_COLOR}"
	npm audit
	echo -e "\n${YELLOW}Updating NPM packages...${RESET_COLOR}"
	npm update
	cat /root/.npm/_logs/*
}

function UPDATE_FLATPAK()
{
	echo -e "\n${YELLOW}Flatpak installed:${RESET_COLOR}"
	flatpak list
	echo -e "\n${YELLOW}Updating flatpak...${RESET_COLOR}"
	flatpak update
}

function UPDATE_GIT()
{
	GIT_REPO_LOCATION="/"
	cd ${GIT_REPO_LOCATION}
	## Search for GIT repos and pull them.
	for GIT_PATH in $(find ${GIT_REPO_LOCATION} -type d -name ".git" 2>/dev/null)
		do
			cd ${GIT_PATH};
			echo -e "\n${BLUE}${BOLD}${GIT_PATH}${RESET_COLOR}"
			cd ..
			git config pull.rebase false
			git stash
			git pull
			cd ${GIT_REPO_LOCATION}
		done
}

function UPDATE_KERNEL()
{
	FIRMWARE_PATH="/opt/FIRMWARE"
	echo -e "\n${YELLOW}Installing the linux firmware packages...${RESET_COLOR}"
	apt-get -f -y install firmware-linux firmware-linux-free firmware-linux-nonfree firmware-misc-nonfree firmware-misc-nonfree 2>/dev/null
	mkdir -p ${FIRMWARE_PATH}
		if  [[ -f /etc/X11/xorg.conf ]]
			then
				grep -e "amdgpu" /etc/X11/xorg.conf > /dev/null
					if [[ ${?} -eq "0" ]]
						then
							echo -e "\n${YELLOW}Your X server is configured to use the amdgpu driver.${RESET_COLOR}"
							echo -e "\n${YELLOW}Cloning the linux firmware (+ the unofficial AMD) repositories...${RESET_COLOR}"
							cd ${FIRMWARE_PATH}
							apt install firmware-amd-graphics
							git clone https://git.kernel.org/pub/scm/linux/kernel/git/firmware/linux-firmware.git 2>/dev/null
							git clone https://github.com/Umio-Yasuno/unofficial-amdgpu-firmware-repo.git 2>/dev/null
							cp -vur ${FIRMWARE_PATH}/unofficial-amdgpu-firmware-repo/amdgpu/* /lib/firmware/amdgpu
							cp -vur ${FIRMWARE_PATH}/linux-firmware/* /lib/firmware
							update-initramfs -u
						else
							grep -e "intel" /etc/X11/xorg.conf > /dev/null
								if [[ ${?} -eq "0" ]]
									then
										echo -e "\n${YELLOW}Your X server is configured to use the intel driver.${RESET_COLOR}"
										echo -e "\n${YELLOW}Cloning the linux firmware repositories...${RESET_COLOR}"
										cd ${FIRMWARE_PATH}
										git clone https://git.kernel.org/pub/scm/linux/kernel/git/firmware/linux-firmware.git 2>/dev/null
										cp -vur ${FIRMWARE_PATH}/linux-firmware/* /lib/firmware
										update-initramfs -u
								fi
					fi
			else
				echo -e "\n${YELLOW}Your X server is not configured yet, stop the current sessions and run 'X -configure' to generate a configuration file.${RESET_COLOR}"
		fi
}

function SYSINFO()
{
	which neofetch > /dev/null
		if [[ ${?} -eq "0" ]]
			then
				neofetch
			else
				echo -e "${HOSTNAME_COLOR_B}$(cat /etc/os-release | grep --color=never -iE '^name=')${RESET_COLOR}"
				free -h
		fi
}

function RUN()
{
	SYSINFO

	which apt-get > /dev/null
		if [[ ${?} -eq "0" ]]
			then
				SECONDS="0"
				echo -e "\n${GREY}${BOLD}$(date '+ %T - %A %d %B %Y')${RESET_COLOR}"
				echo -e "\n${YELLOW}${BOLD}$(dpkg-query -f '.\n' -W | wc -l)${RESET_COLOR}${YELLOW} Packages currently installed.${RESET_COLOR}"
				echo -e "\n${YELLOW}Updating${BOLD} APT${RESET_COLOR}${YELLOW} packages...${RESET_COLOR}"
				UPDATE_APT 2>/dev/null
				echo -e "\n${GREEN}${BOLD}APT ${RESET_COLOR}${GREEN}packages updated in ${SECONDS} seconds.${RESET_COLOR}"
				echo -e "\n${GREEN}Done! ${RESET_COLOR}"
			else
				echo -e "\n${RED}The${BOLD}APT${RESET_COLOR}${RED} package manager is not installed on this system.${RESET_COLOR}"
		fi

		which flatpak > /dev/null
		if [[ ${?} -eq "0" ]]
			then
				SECONDS="0"
				echo -e "\n${GREY}${BOLD}$(date '+ %T - %A %d %B %Y')${RESET_COLOR}"
				echo -e "\n${YELLOW}${BOLD}Flatpak${RESET_COLOR}${YELLOW} is located at $(which flatpak).${RESET_COLOR}"
				echo -e "\n${YELLOW}You are using${BOLD} $(flatpak --version).${RESET_COLOR}"
				UPDATE_FLATPAK 2>/dev/null
				echo -e "\n${GREEN}${BOLD}Flatpak${RESET_COLOR}${GREEN} updated in ${SECONDS} seconds.${RESET_COLOR}"
				echo -e "\n${GREEN}Done! ${RESET_COLOR}"
			else
				echo -e "\n${RED}${BOLD}Flatpak${RESET_COLOR}${RED} is not installed on this system.${RESET_COLOR}"
			fi

		which npm>/dev/null
		if [[ ${?} -eq "0" ]]
			then
				SECONDS="0"
				echo -e "\n${GREY}${BOLD}$(date '+ %T - %A %d %B %Y')${RESET_COLOR}"
				echo -e "\n${YELLOW}${BOLD}NPM${RESET_COLOR}${YELLOW} is located at $(which npm).${RESET_COLOR}"
				echo -e "\n${YELLOW}Updating${BOLD}NPM${RESET_COLOR}${YELLOW} packages...${RESET_COLOR}"
				UPDATE_NPM 2>/dev/null
				echo -e "\n${GREEN}${BOLD}NPM${RESET_COLOR}${GREEN} updated in ${SECONDS} seconds.${RESET_COLOR}"
				echo -e "\n${GREEN}Done! ${RESET_COLOR}"
			else
				echo -e "\n${RED}${BOLD}NPM${RESET_COLOR}${RED} is not installed on this system.${RESET_COLOR}"
		fi

		which git>/dev/null
		if [[ ${?} -eq "0" ]]
			then
				SECONDS="0"
				echo -e "\n${GREY}${BOLD}$(date '+ %T - %A %d %B %Y')${RESET_COLOR}"
				echo -e "\n${YELLOW}${BOLD}Git${RESET_COLOR}${YELLOW} is located at $(which git).${RESET_COLOR}"
				echo -e "\n${YELLOW}Updating${BOLD} Git${RESET_COLOR}${YELLOW} repositories...${RESET_COLOR}"
				UPDATE_GIT 2>/dev/null
				echo -e "\n${GREEN}Git repositories updated in ${SECONDS} seconds.${RESET_COLOR}"
				echo -e "\n${GREEN}Done! ${RESET_COLOR}"
			else
				echo -e "\n${RED}${BOLD}Git${RESET_COLOR}${RED} is not installed on this system.${RESET_COLOR}"
		fi

		SECONDS="0"
		echo -e "\n${GREY}${BOLD}$(date '+ %T - %A %d %B %Y')${RESET_COLOR}"
		echo -e "\n${YELLOW}Updating the${BOLD} Linux kernel${RESET_COLOR}${YELLOW} ...${RESET_COLOR}"
		UPDATE_KERNEL
		echo -e "\n${GREEN}The${BOLD} Linux kernel${RESET_COLOR}${GREEN} has been updated in ${SECONDS} seconds.${RESET_COLOR}"
		echo -e "\n${GREEN}Done! ${RESET_COLOR}"
}

## Check if root?
if [ "$EUID" -ne 0 ]
	then
		echo -e "${RED}This script must be run as root!\nExiting...${RESET_COLOR}"
	    exit 1
	else
		reset && RUN && notify-send ' ✅ Update Done! ' || notify-send ' ❌ Something went wrong during update... '
fi
