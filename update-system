#!/bin/bash
## This script is only made for Debian based distros, it will update:
## - APT packages
## - Git repositories
## - Flatpak applications
## - NPM packages
## - Linux firmware and kernel.

## Set colors.
RC="\e[0m"
BOLD="\e[1m"
GREY="\e[37m"
YELLOW="\e[33m"
GREEN="\e[32m"
RED="\e[31m"
CYAN="\e[36m"
BLUE="\e[34m"
MAGENTA="\e[35m"

WARN="${RED}${BOLD} [-]${RC}"
INFO="${BLUE}${BOLD} [*]${RC}"
GOOD="${GREEN}${BOLD} [+]${RC}"

UPDATE_APT()
{
	echo -e "${INFO}Removing downloaded archive files and unused packages..."
	apt-get -f -y clean
	apt-get -f -y autoclean
	apt-get -f -y autoremove --purge

	echo -e "${INFO}Configuring/fixing possibly broken packages..."
	apt-get -f -y install
	dpkg --configure -a

	echo -e "${INFO}Retrieving new lists of packages..."
	apt-get update

	echo -e "${INFO}Installing packages upgrades..."
	apt-get -f -y upgrade
	apt-get -f -y dist-upgrade
	apt-get -f -y full-upgrade

	echo -e "${INFO}Configuring possibly broken packages..."
	apt-get -f -y install
	dpkg --configure -a

	echo -e "${INFO}Removing downloaded archive files and unused packages..."
	apt-get -f -y install
	apt-get -f -y clean
	apt-get -f -y autoclean
	apt-get -f -y autoremove --purge

}

UPDATE_NPM()
{
	echo -e "${INFO}Checking NPM installation..."
	npm doctor
	echo -e "${INFO}Auditing packages..."
	npm audit
	echo -e "${INFO}Updating NPM packages..."
	npm update
	cat /root/.npm/_logs/*
}

UPDATE_FLATPAK()
{
	echo -e "${INFO}Flatpak applications installed:"
	flatpak list
	echo -e "${INFO}Updating flatpak..."
	flatpak update -y
}

UPDATE_GIT()
{
	GIT_REPO_LOCATION="/"
	cd ${GIT_REPO_LOCATION}
	## Search for GIT repos and update them.
	## (i need to find a better way to exclude /mnt)
	for GIT_PATH in $(find ${GIT_REPO_LOCATION} -type d -name ".git" 2>/dev/null | grep -v /mnt/)
		do
			cd ${GIT_PATH};
			echo -e "${INFO}\nUpdating ${GIT_PATH}..."
			cd ..
			git config pull.rebase true
			git stash
			git pull
			cd ${GIT_REPO_LOCATION}
		done
}

UPDATE_KERNEL()
{
	## Update the firmware with the official packages, the linux firmware and unoficial AMD firmware repositories.
	## Then update the kernel.
	FIRMWARE_PATH="/opt/FIRMWARE"
	echo -e "${INFO}\nInstalling the linux firmware packages..."
	apt-get -f -y install firmware-linux firmware-linux-free firmware-linux-nonfree firmware-misc-nonfree firmware-misc-nonfree 2>/dev/null
	mkdir -p ${FIRMWARE_PATH}
	## Proceed only if the X server is configured.
	if [[ -f /etc/X11/xorg.conf ]]
		then
			## Install the needed firmware according to the graphic card used in the Xorg configuration file.
			if ! grep -e "amdgpu" /etc/X11/xorg.conf > /dev/null
				then
					if ! grep -e "intel" /etc/X11/xorg.conf > /dev/null
						then
					echo -e "${INFO}Your X server is configured to use the intel driver."
						else
						echo -e "${INFO}Cloning the linux firmware repositories..."
						cd ${FIRMWARE_PATH}
						git clone https://git.kernel.org/pub/scm/linux/kernel/git/firmware/linux-firmware.git 2>/dev/null
						cp -vur ${FIRMWARE_PATH}/linux-firmware/* /lib/firmware
						update-initramfs -u
					fi
				else
					echo -e "${INFO}Your X server is configured to use the amdgpu driver."
					echo -e "${INFO}Cloning the linux firmware (+ the unofficial AMD) repositories..."
					cd ${FIRMWARE_PATH}
					apt install firmware-amd-graphics
					git clone "https://git.kernel.org/pub/scm/linux/kernel/git/firmware/linux-firmware.git" 2>/dev/null
					git clone "https://github.com/Umio-Yasuno/unofficial-amdgpu-firmware-repo.git" 2>/dev/null
					cp -vur ${FIRMWARE_PATH}/unofficial-amdgpu-firmware-repo/amdgpu/* /lib/firmware/amdgpu
					cp -vur ${FIRMWARE_PATH}/linux-firmware/* /lib/firmware
					update-initramfs -u
		fi
	fi
}

SYSINFO()
{
	## Set the main color based on the distribution.
	DISTRO=$(cat /etc/os-release | grep PRETTY | cut -d "=" -f 2 | sed 's/"//g' | awk '{print $1}')
	case ${DISTRO} in
		Kali)
			HOSTNAME_COLOR=${CYAN}
			;;
		Debian)
			HOSTNAME_COLOR=${MAGENTA}
			;;
		*)
			HOSTNAME_COLOR=${GREEN}
			;;
	esac

	REQUIREMENTS="neofetch"
	if ! which ${REQUIREMENTS} > /dev/null
		then
			## Print basic system information if neofetch is not available.
			echo -e "${HOSTNAME_COLOR}$(cat /etc/os-release | grep --color=never -iE '^name=')"
			free -h
		else
			neofetch
	fi
}

RUN()
{
	echo -e "\n$(date '+ %T - %A %d %B %Y')\n"
	SYSINFO

	## Update apt packages.
	if ! which apt-get > /dev/null
		then
			echo -e "${WARN} \nTheAPT package manager is not installed on this system."
		else
			SECONDS="0"
			echo -e "${INFO}\n$(dpkg-query -f '.\n' -W | wc -l) Packages currently installed."
			echo -e "${INFO}\nUpdating APT packages..."
			UPDATE_APT 2>/dev/null
			echo -e "${GOOD} \nAPT packages updated in ${SECONDS} seconds."
	fi

	if ! which flatpak > /dev/null
		then
				echo -e "${WARN} \nFlatpak is not installed on this system."
			else
				SECONDS="0"
				echo -e "${INFO}\nYou are using $(flatpak --version)."
				UPDATE_FLATPAK 2>/dev/null
				echo -e "${GOOD} \nFlatpak updated in ${SECONDS} seconds."
			fi

		if ! which npm > /dev/null
			then
				echo -e "${WARN} \nNPM is not installed on this system."
			else
				SECONDS="0"
				echo -e "${INFO}\nUpdatingNPM packages..."
				UPDATE_NPM 2>/dev/null
				echo -e "${GOOD} \nNPM updated in ${SECONDS} seconds."
		fi

		if ! which git > /dev/null
			then
				echo -e "${WARN} \nGit is not installed on this system."
			else
				SECONDS="0"
				echo -e "${INFO}\nUpdating Git repositories..."
				UPDATE_GIT 2>/dev/null
				echo -e "${GOOD} \nGit repositories updated in ${SECONDS} seconds."
		fi

		SECONDS="0"
		echo -e "${INFO}\nUpdating the Linux kernel..."
		UPDATE_KERNEL
		echo -e "${GOOD} \nThe Linux kernel has been updated in ${SECONDS} seconds."
}

## Check privileges and proceed.
if [[ ${EUID} -ne 0 ]]
	then
		echo -e "This script must be run as root!\nExiting..."
	    exit 1
	else
		reset
		RUN && echo -e "${GOOD}\n Update finished!" || echo -e "${WARN} \nSomething went wrong during update..."
fi
