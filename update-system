#!/bin/bash
## This script is only made for Debian based distros, it will update:
## - APT packages
## - Git repositories
## - Flatpak applications
## - NPM applications
## - The Linux firmware
## Comming soon (or not):
## - Snap

RESET_COLOR="\e[0m"
BOLD="\e[1m"
BLUE="\e[34m"
RED="\e[31m"
GREEN="\e[32m"
YELLOW="\e[33m"
GREY="\e[37m"

function UPDATE_APT()
{
	echo -e "\n${YELLOW}Resynchronizing the package index files from their sources...${RESET_COLOR}"
	apt-get -y -f clean
	apt-get -y -f autoclean
	apt-get -y -f --autoremove --purge

	echo -e "\n${YELLOW}Configuring/fixing possibly broken packages...${RESET_COLOR}"
	dpkg --configure -a
	apt-get -y -f install

	echo -e "\n${YELLOW}Retrieving new lists of packages...${RESET_COLOR}"
	apt-get -y -f update

	echo -e "\n${YELLOW}Installing packages upgrades...${RESET_COLOR}"
	apt-get -y -f upgrade --with-new-pkgs
	apt-get -y -f dist-upgrade
	apt-get -y -f full-upgrade

	echo -e "\n${YELLOW}Configuring possibly broken packages...${RESET_COLOR}"
	dpkg --configure -a
	apt-get -y -f install

	echo -e "\n${YELLOW}Removing downloaded archive files and unused packages...${RESET_COLOR}"
	apt-get -y -f clean

	apt-get -y -f autoclean
	apt-get -y -f autoremove --purge

}

function UPDATE_NPM()
{
	echo -e "\n${YELLOW}Checking NPM installation...${RESET_COLOR}"
	npm doctor
	echo -e "\n${YELLOW}Auditing packages...${RESET_COLOR}"
	npm audit
	echo -e "\n${YELLOW}Updating NPM packages...${RESET_COLOR}"
	npm update
	cat /root/.npm/_logs/*
}

function UPDATE_FLATPAK()
{
	echo -e "\n${YELLOW}Flatpack installed:${RESET_COLOR}"
	flatpak list
	echo -e "\n${YELLOW}Updating flatpack...${RESET_COLOR}"
	flatpak update
}

GIT_REPO_LOCATION="/"
function UPDATE_GIT()
{
	cd ${GIT_REPO_LOCATION}
	## Search for GIT repos and pull them.
	for GIT_PATH in $(find ${GIT_REPO_LOCATION} -type d -name ".git" 2>/dev/null)
		do
			cd ${GIT_PATH};
			echo -e "\n${BLUE}${BOLD}${GIT_PATH}${RESET_COLOR}"
			cd ..
			git config pull.rebase false
			git stash
			git pull
			cd ${GIT_REPO_LOCATION}
		done
}

function UPDATE_KERNEL()
{
	FIRMWARE_PATH="/opt/FIRMWARE"
	echo -e "\n${YELLOW}Installing the linux firmware packages...${RESET_COLOR}"
	apt-get -y -f install firmware-linux firmware-linux-free firmware-linux-nonfree 2>/dev/null
	mkdir -p ${FIRMWARE_PATH}
		if  [[ -f /etc/X11/xorg.conf ]]
			then
				grep -e "amdgpu" /etc/X11/xorg.conf > /dev/null
					if [[ ${?} -eq "0" ]]
						then
							echo -e "\n${YELLOW}Your X server is configured to use the amdgpu driver.${RESET_COLOR}"
							echo -e "\n${YELLOW}Cloning the linux firmware (+ the unofficial AMD) repositories...${RESET_COLOR}"
							cd ${FIRMWARE_PATH}
							git clone https://git.kernel.org/pub/scm/linux/kernel/git/firmware/linux-firmware.git 2>/dev/null
							git clone https://github.com/Umio-Yasuno/unofficial-amdgpu-firmware-repo.git 2>/dev/null
							cp -vur ${FIRMWARE_PATH}/unofficial-amdgpu-firmware-repo/amdgpu/* /lib/firmware/amdgpu
							cp -vur ${FIRMWARE_PATH}/linux-firmware/* /lib/firmware
							update-initramfs -u
						else
							grep -e "intel" /etc/X11/xorg.conf > /dev/null
								if [[ ${?} -eq "0" ]]
									then
										echo -e "\n${YELLOW}Your X server is configured to use the intel driver.${RESET_COLOR}"
										echo -e "\n${YELLOW}Cloning the linux firmware repositories...${RESET_COLOR}"
										cd ${FIRMWARE_PATH}
										git clone https://git.kernel.org/pub/scm/linux/kernel/git/firmware/linux-firmware.git 2>/dev/null
										cp -vur ${FIRMWARE_PATH}/linux-firmware/* /lib/firmware
										update-initramfs -u
								fi
					fi
			else
				echo -e "\n${YELLOW}Your X server is not configured yet, stop the current sessions and run 'X -configure' to generate a configuration file.${RESET_COLOR}"
		fi
}

function RUN()
{
	which neofetch > /dev/null
		if [[ ${?} -eq "0" ]]
			then
				neofetch
			else
				## Check on which distro i am (Kali or Debian).
				DISTRO=$(cat /etc/os-release | grep PRETTY | cut -d "=" -f 2 | sed 's/"//g')

				## Change color info based on the distro.
				if [[ ${DISTRO} == 'Kali GNU/Linux Rolling' ]]
					then
						echo -e "${BOLD}${BLUE}$(cat /etc/os-release | grep PRETTY_NAME | cut -d "=" -f 2 | sed 's/"//g')" ; echo -e "${GREY}${BOLD}$(free -h --si)" ; echo -e "\n\e[33m$(apt list --installed 2>/dev/null| wc -l) packages currently installed"
				elif [[ ${DISTRO} == 'Debian GNU/Linux 11 (bullseye)' ]]
					then
						echo -e "${BOLD}${RED}$(cat /etc/os-release | grep PRETTY_NAME | cut -d "=" -f 2 | sed 's/"//g')" ; echo -e "${GREY}${BOLD}$(free -h --si)" ; echo -e "\n\e[33m$(apt list --installed 2>/dev/null| wc -l) packages currently installed"
					else
						echo -e "${BOLD}$(cat /etc/os-release | grep PRETTY_NAME | cut -d "=" -f 2 | sed 's/"//g')" ; echo -e "${GREY}${BOLD}$(free -h --si)" ; echo -e "\n\e[33m$(apt list --installed 2>/dev/null| wc -l) packages currently installed"
				fi
		fi

		which apt-get > /dev/null
		if [[ ${?} -eq "0" ]]
			then
				SECONDS="0"
				echo -e "\n${GREY}${BOLD}$(date '+ %T - %A %d %B %Y')${RESET_COLOR}"
				echo -e "\n${YELLOW}${BOLD}$(apt list --installed | wc -l)${RESET_COLOR}${YELLOW} Packages currently installed.${RESET_COLOR}"
				echo -e "\n${YELLOW}Updating${BOLD} APT${RESET_COLOR}${YELLOW} packages...${RESET_COLOR}"
				UPDATE_APT 2>/dev/null
				echo -e "\n${GREEN}${BOLD}$(apt list --installed 2>/dev/null | wc -l) APT ${RESET_COLOR}${GREEN}packages updated in ${SECONDS} seconds.${RESET_COLOR}"
				echo -e "\n${GREEN}Done ! ${RESET_COLOR}"
			else
				echo -e "\n${RED}The${BOLD}APT${RESET_COLOR}${RED} package manager is not installed on this system.${RESET_COLOR}"
		fi

		which flatpak > /dev/null
		if [[ ${?} -eq "0" ]]
			then
				SECONDS="0"
				echo -e "\n${GREY}${BOLD}$(date '+ %T - %A %d %B %Y')${RESET_COLOR}"
				echo -e "\n${YELLOW}${BOLD}Flatpak${RESET_COLOR}${YELLOW} is located at $(which flatpak).${RESET_COLOR}"
				echo -e "\n${YELLOW}You are using${BOLD} $(flatpak --version).${RESET_COLOR}"
				UPDATE_FLATPAK 2>/dev/null
				echo -e "\n${GREEN}${BOLD}Flatpak${RESET_COLOR}${GREEN} updated in ${SECONDS} seconds.${RESET_COLOR}"
				echo -e "\n${GREEN}Done ! ${RESET_COLOR}"
			else
				echo -e "\n${RED}${BOLD}Flatpak${RESET_COLOR}${RED} is not installed on this system.${RESET_COLOR}"
			fi

		which npm>/dev/null
		if [[ ${?} -eq "0" ]]
			then
				SECONDS="0"
				echo -e "\n${GREY}${BOLD}$(date '+ %T - %A %d %B %Y')${RESET_COLOR}"
				echo -e "\n${YELLOW}${BOLD}NPM${RESET_COLOR}${YELLOW} is located at $(which npm).${RESET_COLOR}"
				echo -e "\n${YELLOW}Updating${BOLD}NPM${RESET_COLOR}${YELLOW} packages...${RESET_COLOR}"
				UPDATE_NPM 2>/dev/null
				echo -e "\n${GREEN}${BOLD}NPM${RESET_COLOR}${GREEN} updated in ${SECONDS} seconds.${RESET_COLOR}"
				echo -e "\n${GREEN}Done ! ${RESET_COLOR}"
			else
				echo -e "\n${RED}${BOLD}NPM${RESET_COLOR}${RED} is not installed on this system.${RESET_COLOR}"
		fi
			which git>/dev/null
		if [[ ${?} -eq "0" ]]
			then
				SECONDS="0"
				echo -e "\n${GREY}${BOLD}$(date '+ %T - %A %d %B %Y')${RESET_COLOR}"
				echo -e "\n${YELLOW}${BOLD}Git${RESET_COLOR}${YELLOW} is located at $(which git).${RESET_COLOR}"
				echo -e "\n${YELLOW}Updating${BOLD} Git${RESET_COLOR}${YELLOW} repositories...${RESET_COLOR}"
				UPDATE_GIT 2>/dev/null
				echo -e "\n${GREEN}Git repositories updated in ${SECONDS} seconds.${RESET_COLOR}"
				echo -e "\n${GREEN}Done ! ${RESET_COLOR}"
			else
				echo -e "\n${RED}${BOLD}Git${RESET_COLOR}${RED} is not installed on this system.${RESET_COLOR}"
		fi
			SECONDS="0"
		echo -e "\n${GREY}${BOLD}$(date '+ %T - %A %d %B %Y')${RESET_COLOR}"
		echo -e "\n${YELLOW}Updating the${BOLD} Linux kernel${RESET_COLOR}${YELLOW} ...${RESET_COLOR}"
		UPDATE_KERNEL
		echo -e "\n${GREEN}The${BOLD} Linux kernel${RESET_COLOR}${GREEN} has been updated in ${SECONDS} seconds.${RESET_COLOR}"
		echo -e "\n${GREEN}Done ! ${RESET_COLOR}"
}

## Check if root ?
if [ "$EUID" -ne 0 ]
	then
		echo -e "${RED}This script must be runned as root !${RESET_COLOR}"
	    exit 1
	else
		reset && RUN && notify-send 'Update Done âœ…' || notify-send 'Something went wrong during update...ðŸ“›'
fi
